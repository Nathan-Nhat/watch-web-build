{"version":3,"sources":["../node_modules/clsx/dist/clsx.m.js","assets/empty-cart.png","containers/cart/Cart.js","containers/template/MetaTag/MetaTag.js","containers/template/RouteTemplate.js"],"names":["toVal","mix","k","y","str","Array","isArray","length","tmp","x","i","arguments","module","exports","TableCell","className","children","align","clsx","Cart","cartData","useSelector","state","cartReducer","dispatch","useDispatch","total","useMemo","reduce","cur","amount","sale_price","useEffect","title","description","DESC_DEFAULT","image_url","LOGO_DEFAULT","url","APP_URL","data","name","path","src","NoProduct","map","item","index","key","product_id","style","width","height","url_image_main","Number","toLocaleString","onClick","newValue","changeAmountCart","type","value","onChange","e","target","removeFromCard","flexGrow","padding","price","textAlign","marginTop","marginBottom","MetaTag","console","log","document","defer","titleTemplate","meta","property","content","RouteTemplate","Fragment","fontWeight"],"mappings":"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","file":"static/js/15.a30b83e5.chunk.js","sourcesContent":["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","module.exports = __webpack_public_path__ + \"static/media/empty-cart.66ff55e9.png\";","import React, {useEffect, useMemo, useState} from \"react\";\r\nimport './Cart.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport clsx from \"clsx\";\r\nimport {useDispatch} from 'react-redux'\r\nimport {changeAmountCart, removeFromCard} from \"../../redux/actions/actions\";\r\nimport LinkTemplate from \"../template/LinkTemplate\";\r\nimport SaleItem from \"../template/SaleItem\";\r\nimport RouteTemplate from \"../template/RouteTemplate\";\r\nimport BodyTemplate from \"../template/BodyTemplate\";\r\nimport NoProduct from \"../../assets/empty-cart.png\"\r\nimport MetaTag from \"../template/MetaTag/MetaTag\";\r\nimport {APP_URL, DESC_DEFAULT, LOGO_DEFAULT} from \"../../constants/Constants\";\r\nexport const TableCell = ({className, children, align}) => {\r\n    return <td className={clsx(\r\n        className, 'tc', (align === 'center') && 'tc-center', (align === 'left') && 'tc-left', (align === 'right') && 'tc-right'\r\n    )}>\r\n        {children}\r\n    </td>\r\n}\r\n\r\nexport default function Cart() {\r\n    const cartData = useSelector(state => state.cartReducer)\r\n    const dispatch = useDispatch()\r\n    const total = useMemo(() => {\r\n        let total = cartData.reduce((total, cur) => {\r\n            return total + cur.amount * cur.sale_price\r\n        }, 0)\r\n        return total\r\n    }, [cartData])\r\n    useEffect(() => {\r\n    }, [])\r\n    return (\r\n        <BodyTemplate>\r\n            <MetaTag title={`Giỏ hàng`} description={DESC_DEFAULT} image_url={LOGO_DEFAULT} url={APP_URL} />\r\n            <RouteTemplate data={\r\n                [\r\n                    {\r\n                        name: \"Trang chủ\",\r\n                        path: \"/\"\r\n                    },\r\n                    {\r\n                        name: \"Giỏ hàng\",\r\n                    }\r\n                ]\r\n            }/>\r\n            <div className='cart-container'>\r\n                <div className='cart-title'>Giỏ hàng</div>\r\n                <hr className='cart-divider'></hr>\r\n                {\r\n                    cartData.length ===0? <div className='cart-image-container'>\r\n                            <img src={NoProduct} className='cart-image'/>\r\n                            <p>Không có sản phẩm nào trong giỏ hàng!</p>\r\n                    </div> :\r\n                    <div>\r\n                        <div className='cart-container-desktop'>\r\n                            <table className='cart-table'>\r\n                                <tr>\r\n                                    <TableCell align={'center'} className='cart-table-head'>Ảnh sản phẩm</TableCell>\r\n                                    <TableCell align={'center'} className='cart-table-head'>Tên sản phẩm</TableCell>\r\n                                    <TableCell align={'center'} className='cart-table-head'>Đơn giá</TableCell>\r\n                                    <TableCell align={'center'} className='cart-table-head'>Số lượng</TableCell>\r\n                                    <TableCell align={'center'} className='cart-table-head'>Thành tiền</TableCell>\r\n                                    <TableCell align={'center'} className='cart-table-head'>Xóa</TableCell>\r\n                                </tr>\r\n                                {\r\n                                    cartData.map((item, index) => {\r\n                                        return <tr key={index}>\r\n                                            <TableCell align={'center'}>\r\n                                                <LinkTemplate path={`/product/${item.product_id}`}>\r\n                                                    <img style={{width: '5em', height: '5em'}}\r\n                                                         src={item.url_image_main}/>\r\n                                                </LinkTemplate>\r\n                                            </TableCell>\r\n                                            <TableCell align={'left'}>{item.name}</TableCell>\r\n                                            <TableCell\r\n                                                align={'center'}>{Number(item.sale_price).toLocaleString('en')}</TableCell>\r\n                                            <TableCell align={'center'}>\r\n                                                <button className='cart-button-add' onClick={() => {\r\n                                                    let newValue = Number(item.amount) + 1\r\n                                                    dispatch(changeAmountCart({\r\n                                                        product_id: item.product_id,\r\n                                                        amount: newValue\r\n                                                    }))\r\n                                                }}>+\r\n                                                </button>\r\n                                                <input className='cart-input-amount' type='number' value={item.amount}\r\n                                                       onChange={(e) => {\r\n                                                           if (Number(e.target.value) <= 0) {\r\n                                                               return\r\n                                                           }\r\n                                                           dispatch(changeAmountCart({\r\n                                                               product_id: item.product_id,\r\n                                                               amount: Number(e.target.value)\r\n                                                           }))\r\n                                                       }}/>\r\n                                                <button className='cart-button-add' onClick={() => {\r\n                                                    let newValue = Number(item.amount) - 1\r\n                                                    if (newValue <= 0) {\r\n                                                        return\r\n                                                    }\r\n                                                    dispatch(changeAmountCart({\r\n                                                        product_id: item.product_id,\r\n                                                        amount: newValue\r\n                                                    }))\r\n                                                }}>-\r\n                                                </button>\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align={'center'}>{Number(item.amount * item.sale_price).toLocaleString('en')}</TableCell>\r\n                                            <TableCell align={'center'}>\r\n                                                <div className='cart-button-delete' onClick={() => {\r\n                                                    dispatch(removeFromCard({\r\n                                                        product_id: item.product_id\r\n                                                    }))\r\n                                                }}>\r\n                                                    <i className=\"far fa-trash-alt\"></i>\r\n                                                </div>\r\n                                            </TableCell>\r\n                                        </tr>\r\n                                    })\r\n                                }\r\n                            </table>\r\n                            <div className={'cart-table-price-container'}>\r\n                                <LinkTemplate path='/'>\r\n                                    <div className='cart-button-more'>Xem thêm mặt hàng</div>\r\n                                </LinkTemplate>\r\n                                <div style={{flexGrow: 1}}></div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr>\r\n                                            <TableCell align={'left'}>Tạm tính</TableCell>\r\n                                            <TableCell align={'right'}\r\n                                                       className={'cart-price'}>{`${Number(total).toLocaleString('en')}đ`}</TableCell>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <TableCell align={'left'}>Tổng tiền thanh toán</TableCell>\r\n                                            <TableCell align={'right'}\r\n                                                       className={'cart-price'}>{`${Number(total).toLocaleString('en')}đ`}</TableCell>\r\n                                        </tr>\r\n                                    </table>\r\n                                    <LinkTemplate path='/thanh-toan'>\r\n                                        <div className='cart-button-more btn-checkout'>Thanh toán</div>\r\n                                    </LinkTemplate>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='cart-container-mobile'>\r\n                            {\r\n                                cartData.map((item, index) => (\r\n                                    <div key={index} style={{padding: '0.5em'}}>\r\n                                        <div className='cart-element-mobile'>\r\n                                            <SaleItem data={{\r\n                                                product_id: item.product_id,\r\n                                                price: item.price,\r\n                                                sale_price: item.sale_price,\r\n                                                url_image_main: item.url_image_main,\r\n                                                name: item.name\r\n                                            }}/>\r\n                                            <div className='cart-element-right'>\r\n                                                <div>\r\n                                                    <button className='cart-button-add' onClick={() => {\r\n                                                        let newValue = Number(item.amount) + 1\r\n                                                        dispatch(changeAmountCart({\r\n                                                            product_id: item.product_id,\r\n                                                            amount: newValue\r\n                                                        }))\r\n                                                    }}>+\r\n                                                    </button>\r\n                                                    <input className='cart-input-amount' type='number'\r\n                                                           value={item.amount}\r\n                                                           onChange={(e) => {\r\n                                                               if (Number(e.target.value) <= 0) {\r\n                                                                   return\r\n                                                               }\r\n                                                               dispatch(changeAmountCart({\r\n                                                                   product_id: item.product_id,\r\n                                                                   amount: Number(e.target.value)\r\n                                                               }))\r\n                                                           }}/>\r\n                                                    <button className='cart-button-add' onClick={() => {\r\n                                                        let newValue = Number(item.amount) - 1\r\n                                                        if (newValue <= 0) {\r\n                                                            return\r\n                                                        }\r\n                                                        dispatch(changeAmountCart({\r\n                                                            product_id: item.product_id,\r\n                                                            amount: newValue\r\n                                                        }))\r\n                                                    }}>-\r\n                                                    </button>\r\n                                                </div>\r\n                                                <div className='cart-button-delete delete-mobile' onClick={() => {\r\n                                                    dispatch(removeFromCard({\r\n                                                        product_id: item.product_id\r\n                                                    }))\r\n                                                }}>\r\n                                                    <i className=\"far fa-trash-alt\"></i> Xóa\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <hr className='cart-divider card-main'></hr>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                            <div style={{textAlign: 'center'}}>Tổng tiền thanh toán</div>\r\n                            <div style={{textAlign: 'center', marginTop: '0.5em', marginBottom: '0.5em'}}\r\n                                 className={'cart-price'}>{`${Number(total).toLocaleString('en')}đ`}</div>\r\n                            <LinkTemplate path='/thanh-toan'>\r\n                                <div className='cart-button-more btn-checkout'>Thanh toán</div>\r\n                            </LinkTemplate>\r\n                            <LinkTemplate path='/'>\r\n                                <div className='cart-button-more-mobile'>Xem thêm mặt hàng</div>\r\n                            </LinkTemplate>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </BodyTemplate>\r\n    );\r\n}","import React, {useEffect} from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\nconst MetaTag = ({title, description, url, image_url}) => {\r\n    useEffect(()=>{\r\n        console.log(document.title)\r\n            console.log(title)\r\n\r\n    },[title])\r\n    return (\r\n        <Helmet defer={false}\r\n            titleTemplate=\"%s | Máy thực phẩm Việt Nhật - Máy thực phẩm số 1 Việt Nam\"\r\n            meta={[\r\n                {\r\n                    name: \"description\",\r\n                    property: \"og:description\",\r\n                    content: description\r\n                },\r\n                {property: \"og:title\", content: title},\r\n                {property: \"og:url\", content: url},\r\n                {property: \"og:image\", content: image_url},\r\n                {property: \"og:image:type\", content: \"image/png\"},\r\n                {property: \"twitter:card\", content: \"summary_large_image\"},\r\n                {property: \"twitter:image:src\", content: image_url},\r\n                {property: \"twitter:title\", content: title},\r\n                {property: \"twitter:description\", content: description}\r\n            ]}>\r\n            <title>{title}</title>\r\n        </Helmet>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default MetaTag;","import React from 'react';\r\nimport LinkTemplate from \"./LinkTemplate\";\r\nimport './RouteTemplate.css'\r\n\r\nconst RouteTemplate = ({data}) => {\r\n    return (\r\n        <p className='product-category'>\r\n            {\r\n                data.map((item, index) => {\r\n                    if (index !== data.length - 1) {\r\n                        return <React.Fragment>\r\n                            <LinkTemplate path={`${item.path}`}>\r\n                        <span className='product-link-c'>\r\n                            {`${item.name}`}\r\n                        </span>\r\n                            </LinkTemplate>\r\n                            <span className='product-path-divider'>\r\n                    >\r\n                </span>\r\n                        </React.Fragment>\r\n                    }\r\n                    else {\r\n                        return <span className='product-link-c' style={{fontWeight:'bold'}}> {item.name}</span>\r\n                    }\r\n                })\r\n            }\r\n        </p>\r\n    );\r\n};\r\n\r\nexport default RouteTemplate;"],"sourceRoot":""}