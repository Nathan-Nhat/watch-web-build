{"version":3,"sources":["assets/empty-cart.png","containers/cart/Cart.js","containers/template/MetaTag/MetaTag.js","containers/template/RouteTemplate.js","../node_modules/clsx/dist/clsx.m.js"],"names":["module","exports","TableCell","className","children","align","clsx","Cart","cartData","useSelector","state","cartReducer","dispatch","useDispatch","total","useMemo","reduce","cur","amount","sale_price","useEffect","title","description","DESC_DEFAULT","image_url","LOGO_DEFAULT","url","APP_URL","data","name","path","length","src","NoProduct","alt","map","item","index","key","product_id","style","width","height","url_image_main","Number","toLocaleString","onClick","newValue","changeAmountCart","type","value","onChange","e","target","removeFromCard","flexGrow","padding","price","textAlign","marginTop","marginBottom","MetaTag","defer","meta","property","content","RouteTemplate","Fragment","fontWeight","toVal","mix","k","y","str","Array","isArray","tmp","x","i","arguments"],"mappings":"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","file":"static/js/15.ad696881.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-cart.66ff55e9.png\";","import React, {useEffect, useMemo, useState} from \"react\";\nimport './Cart.css'\nimport {useSelector} from \"react-redux\";\nimport clsx from \"clsx\";\nimport {useDispatch} from 'react-redux'\nimport {changeAmountCart, removeFromCard} from \"../../redux/actions/actions\";\nimport LinkTemplate from \"../template/LinkTemplate\";\nimport SaleItem from \"../template/SaleItem\";\nimport RouteTemplate from \"../template/RouteTemplate\";\nimport BodyTemplate from \"../template/BodyTemplate\";\nimport NoProduct from \"../../assets/empty-cart.png\"\nimport MetaTag from \"../template/MetaTag/MetaTag\";\nimport {APP_URL, DESC_DEFAULT, LOGO_DEFAULT} from \"../../constants/Constants\";\nexport const TableCell = ({className, children, align}) => {\n    return <td className={clsx(\n        className, 'tc', (align === 'center') && 'tc-center', (align === 'left') && 'tc-left', (align === 'right') && 'tc-right'\n    )}>\n        {children}\n    </td>\n}\n\nexport default function Cart() {\n    const cartData = useSelector(state => state.cartReducer)\n    const dispatch = useDispatch()\n    const total = useMemo(() => {\n        let total = cartData.reduce((total, cur) => {\n            return total + cur.amount * cur.sale_price\n        }, 0)\n        return total\n    }, [cartData])\n    useEffect(() => {\n    }, [])\n    return (\n        <BodyTemplate>\n            <MetaTag title={`Giỏ hàng`} description={DESC_DEFAULT} image_url={LOGO_DEFAULT} url={APP_URL} />\n            <RouteTemplate data={\n                [\n                    {\n                        name: \"Trang chủ\",\n                        path: \"/\"\n                    },\n                    {\n                        name: \"Giỏ hàng\",\n                    }\n                ]\n            }/>\n            <div className='cart-container'>\n                <div className='cart-title'>Giỏ hàng</div>\n                <hr className='cart-divider'></hr>\n                {\n                    cartData.length ===0? <div className='cart-image-container'>\n                            <img src={NoProduct} className='cart-image' alt={''}/>\n                            <p>Không có sản phẩm nào trong giỏ hàng!</p>\n                    </div> :\n                    <div>\n                        <div className='cart-container-desktop'>\n                            <table className='cart-table'>\n                                <tr>\n                                    <TableCell align={'center'} className='cart-table-head'>Ảnh sản phẩm</TableCell>\n                                    <TableCell align={'center'} className='cart-table-head'>Tên sản phẩm</TableCell>\n                                    <TableCell align={'center'} className='cart-table-head'>Đơn giá</TableCell>\n                                    <TableCell align={'center'} className='cart-table-head'>Số lượng</TableCell>\n                                    <TableCell align={'center'} className='cart-table-head'>Thành tiền</TableCell>\n                                    <TableCell align={'center'} className='cart-table-head'>Xóa</TableCell>\n                                </tr>\n                                {\n                                    cartData.map((item, index) => {\n                                        return <tr key={index}>\n                                            <TableCell align={'center'}>\n                                                <LinkTemplate path={`/product/${item.product_id}`}>\n                                                    <img style={{width: '5em', height: '5em'}}\n                                                         src={item.url_image_main} alt={''}/>\n                                                </LinkTemplate>\n                                            </TableCell>\n                                            <TableCell align={'left'}>{item.name}</TableCell>\n                                            <TableCell\n                                                align={'center'}>{Number(item.sale_price).toLocaleString('en')}</TableCell>\n                                            <TableCell align={'center'}>\n                                                <button className='cart-button-add' onClick={() => {\n                                                    let newValue = Number(item.amount) + 1\n                                                    dispatch(changeAmountCart({\n                                                        product_id: item.product_id,\n                                                        amount: newValue\n                                                    }))\n                                                }}>+\n                                                </button>\n                                                <input className='cart-input-amount' type='number' value={item.amount}\n                                                       onChange={(e) => {\n                                                           if (Number(e.target.value) <= 0) {\n                                                               return\n                                                           }\n                                                           dispatch(changeAmountCart({\n                                                               product_id: item.product_id,\n                                                               amount: Number(e.target.value)\n                                                           }))\n                                                       }}/>\n                                                <button className='cart-button-add' onClick={() => {\n                                                    let newValue = Number(item.amount) - 1\n                                                    if (newValue <= 0) {\n                                                        return\n                                                    }\n                                                    dispatch(changeAmountCart({\n                                                        product_id: item.product_id,\n                                                        amount: newValue\n                                                    }))\n                                                }}>-\n                                                </button>\n                                            </TableCell>\n                                            <TableCell\n                                                align={'center'}>{Number(item.amount * item.sale_price).toLocaleString('en')}</TableCell>\n                                            <TableCell align={'center'}>\n                                                <div className='cart-button-delete' onClick={() => {\n                                                    dispatch(removeFromCard({\n                                                        product_id: item.product_id\n                                                    }))\n                                                }}>\n                                                    <i className=\"far fa-trash-alt\"></i>\n                                                </div>\n                                            </TableCell>\n                                        </tr>\n                                    })\n                                }\n                            </table>\n                            <div className={'cart-table-price-container'}>\n                                <LinkTemplate path='/'>\n                                    <div className='cart-button-more'>Xem thêm mặt hàng</div>\n                                </LinkTemplate>\n                                <div style={{flexGrow: 1}}></div>\n                                <div>\n                                    <table>\n                                        <tr>\n                                            <TableCell align={'left'}>Tạm tính</TableCell>\n                                            <TableCell align={'right'}\n                                                       className={'cart-price'}>{`${Number(total).toLocaleString('en')}đ`}</TableCell>\n                                        </tr>\n                                        <tr>\n                                            <TableCell align={'left'}>Tổng tiền thanh toán</TableCell>\n                                            <TableCell align={'right'}\n                                                       className={'cart-price'}>{`${Number(total).toLocaleString('en')}đ`}</TableCell>\n                                        </tr>\n                                    </table>\n                                    <LinkTemplate path='/thanh-toan'>\n                                        <div className='cart-button-more btn-checkout'>Thanh toán</div>\n                                    </LinkTemplate>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='cart-container-mobile'>\n                            {\n                                cartData.map((item, index) => (\n                                    <div key={index} style={{padding: '0.5em'}}>\n                                        <div className='cart-element-mobile'>\n                                            <SaleItem data={{\n                                                product_id: item.product_id,\n                                                price: item.price,\n                                                sale_price: item.sale_price,\n                                                url_image_main: item.url_image_main,\n                                                name: item.name\n                                            }}/>\n                                            <div className='cart-element-right'>\n                                                <div>\n                                                    <button className='cart-button-add' onClick={() => {\n                                                        let newValue = Number(item.amount) + 1\n                                                        dispatch(changeAmountCart({\n                                                            product_id: item.product_id,\n                                                            amount: newValue\n                                                        }))\n                                                    }}>+\n                                                    </button>\n                                                    <input className='cart-input-amount' type='number'\n                                                           value={item.amount}\n                                                           onChange={(e) => {\n                                                               if (Number(e.target.value) <= 0) {\n                                                                   return\n                                                               }\n                                                               dispatch(changeAmountCart({\n                                                                   product_id: item.product_id,\n                                                                   amount: Number(e.target.value)\n                                                               }))\n                                                           }}/>\n                                                    <button className='cart-button-add' onClick={() => {\n                                                        let newValue = Number(item.amount) - 1\n                                                        if (newValue <= 0) {\n                                                            return\n                                                        }\n                                                        dispatch(changeAmountCart({\n                                                            product_id: item.product_id,\n                                                            amount: newValue\n                                                        }))\n                                                    }}>-\n                                                    </button>\n                                                </div>\n                                                <div className='cart-button-delete delete-mobile' onClick={() => {\n                                                    dispatch(removeFromCard({\n                                                        product_id: item.product_id\n                                                    }))\n                                                }}>\n                                                    <i className=\"far fa-trash-alt\"></i> Xóa\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <hr className='cart-divider card-main'></hr>\n                                    </div>\n                                ))\n                            }\n                            <div style={{textAlign: 'center'}}>Tổng tiền thanh toán</div>\n                            <div style={{textAlign: 'center', marginTop: '0.5em', marginBottom: '0.5em'}}\n                                 className={'cart-price'}>{`${Number(total).toLocaleString('en')}đ`}</div>\n                            <LinkTemplate path='/thanh-toan'>\n                                <div className='cart-button-more btn-checkout'>Thanh toán</div>\n                            </LinkTemplate>\n                            <LinkTemplate path='/'>\n                                <div className='cart-button-more-mobile'>Xem thêm mặt hàng</div>\n                            </LinkTemplate>\n                        </div>\n                    </div>\n                }\n            </div>\n        </BodyTemplate>\n    );\n}","import React from 'react';\nimport {Helmet} from \"react-helmet\";\nconst MetaTag = ({title, description, url, image_url}) => {\n    return (\n        <Helmet defer={false}\n            meta={[\n                {\n                    name: \"description\",\n                    property: \"og:description\",\n                    content: description\n                },\n                {property: \"og:title\", content: title},\n                {property: \"og:url\", content: url},\n                {property: \"og:image\", content: image_url},\n                {property: \"og:image:type\", content: \"image/png\"},\n                {property: \"twitter:card\", content: \"summary_large_image\"},\n                {property: \"twitter:image:src\", content: image_url},\n                {property: \"twitter:title\", content: title},\n                {property: \"twitter:description\", content: description}\n            ]}>\n            <title>{title}</title>\n        </Helmet>\n    )\n        ;\n};\n\nexport default MetaTag;","import React from 'react';\nimport LinkTemplate from \"./LinkTemplate\";\nimport './RouteTemplate.css'\n\nconst RouteTemplate = ({data}) => {\n    return (\n        <p className='product-category'>\n            {\n                data.map((item, index) => {\n                    if (index !== data.length - 1) {\n                        return <React.Fragment>\n                            <LinkTemplate path={`${item.path}`}>\n                        <span className='product-link-c'>\n                            {`${item.name}`}\n                        </span>\n                            </LinkTemplate>\n                            <span className='product-path-divider'>\n                    >\n                </span>\n                        </React.Fragment>\n                    }\n                    else {\n                        return <span className='product-link-c' style={{fontWeight:'bold'}}> {item.name}</span>\n                    }\n                })\n            }\n        </p>\n    );\n};\n\nexport default RouteTemplate;","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n"],"sourceRoot":""}